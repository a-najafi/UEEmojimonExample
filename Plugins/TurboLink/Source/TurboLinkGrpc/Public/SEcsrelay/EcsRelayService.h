//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcService.h"
#include "SEcsrelay/EcsRelayClient.h"
#include "EcsRelayService.generated.h"

class UTurboLinkGrpcManager;

UCLASS(ClassGroup = TurboLink, BlueprintType)
class TURBOLINKGRPC_API UECSRelayService : public UGrpcService
{
	GENERATED_BODY()
public:
	UFUNCTION(BlueprintCallable)
	virtual void Connect() override;
	
	UFUNCTION(BlueprintCallable)
	virtual EGrpcServiceState GetServiceState() const override;

	UFUNCTION(BlueprintCallable)
	UECSRelayServiceClient* MakeClient();

private:
	virtual void Shutdown() override;

	UPROPERTY()
	UECSRelayServiceClient* InnerClient; 
public:
	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayIdentity& Response)> FAuthenticateLambda;
	void CallAuthenticate(const FGrpcEcsrelaySignature& Request, FAuthenticateLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayIdentity& Response)> FRevokeLambda;
	void CallRevoke(const FGrpcEcsrelaySignature& Request, FRevokeLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayIdentity& Response)> FPingLambda;
	void CallPing(const FGrpcEcsrelaySignature& Request, FPingLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayCountIdentitiesResponse& Response)> FCountAuthenticatedLambda;
	void CallCountAuthenticated(const FGrpcEcsrelayCountIdentitiesRequest& Request, FCountAuthenticatedLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayCountIdentitiesResponse& Response)> FCountConnectedLambda;
	void CallCountConnected(const FGrpcEcsrelayCountIdentitiesRequest& Request, FCountConnectedLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelaySubscription& Response)> FSubscribeLambda;
	void CallSubscribe(const FGrpcEcsrelaySubscriptionRequest& Request, FSubscribeLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelaySubscription& Response)> FUnsubscribeLambda;
	void CallUnsubscribe(const FGrpcEcsrelaySubscriptionRequest& Request, FUnsubscribeLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayMessage& Response)> FOpenStreamLambda;
	void CallOpenStream(const FGrpcEcsrelaySignature& Request, FOpenStreamLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayPushResponse& Response)> FPushLambda;
	void CallPush(const FGrpcEcsrelayPushRequest& Request, FPushLambda Lambda);

	typedef TFunction<void(const FGrpcResult& Result, const FGrpcEcsrelayBalanceResponse& Response)> FMinBalanceForPushLambda;
	void CallMinBalanceForPush(const FGrpcEcsrelayBalanceRequest& Request, FMinBalanceForPushLambda Lambda);

public:
	class Private;
	Private* const d = nullptr;

public:
	UECSRelayService();
	virtual ~UECSRelayService();
};

