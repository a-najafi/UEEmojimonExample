// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greeter.proto
#ifndef GRPC_greeter_2eproto__INCLUDED
#define GRPC_greeter_2eproto__INCLUDED

#include "greeter.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Greeter {

class GreeterService final {
 public:
  static constexpr char const* service_full_name() {
    return "Greeter.GreeterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::Greeter::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Greeter::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Greeter::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Greeter::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Greeter::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Greeter::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Greeter::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::Greeter::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Hello_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Hello(::grpc::ServerContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Hello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::Greeter::HelloRequest* /*request*/, ::Greeter::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::Greeter::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::Greeter::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Hello<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Hello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Greeter::HelloRequest, ::Greeter::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response) { return this->Hello(context, request, response); }));}
    void SetMessageAllocatorFor_Hello(
        ::grpc::MessageAllocator< ::Greeter::HelloRequest, ::Greeter::HelloResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Greeter::HelloRequest, ::Greeter::HelloResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::Greeter::HelloRequest* /*request*/, ::Greeter::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::Greeter::HelloRequest* /*request*/, ::Greeter::HelloResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Hello<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Hello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::Greeter::HelloRequest* /*request*/, ::Greeter::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Hello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::Greeter::HelloRequest* /*request*/, ::Greeter::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Hello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Hello(context, request, response); }));
    }
    ~WithRawCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::Greeter::HelloRequest* /*request*/, ::Greeter::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Hello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Greeter::HelloRequest, ::Greeter::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Greeter::HelloRequest, ::Greeter::HelloResponse>* streamer) {
                       return this->StreamedHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::Greeter::HelloRequest* /*request*/, ::Greeter::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Greeter::HelloRequest,::Greeter::HelloResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Hello<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Hello<Service > StreamedService;
};

class TimeService final {
 public:
  static constexpr char const* service_full_name() {
    return "Greeter.TimeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Greeter::NowResponse>> Ticktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Greeter::NowResponse>>(TicktokRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Greeter::NowResponse>> AsyncTicktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Greeter::NowResponse>>(AsyncTicktokRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Greeter::NowResponse>> PrepareAsyncTicktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Greeter::NowResponse>>(PrepareAsyncTicktokRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>> Watch(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>>(WatchRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>> AsyncWatch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>>(AsyncWatchRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>> PrepareAsyncWatch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>>(PrepareAsyncWatchRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Ticktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest* request, ::grpc::ClientReadReactor< ::Greeter::NowResponse>* reactor) = 0;
      virtual void Watch(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Greeter::WatchRequest,::Greeter::NowResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::Greeter::NowResponse>* TicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Greeter::NowResponse>* AsyncTicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Greeter::NowResponse>* PrepareAsyncTicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>* WatchRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>* AsyncWatchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Greeter::WatchRequest, ::Greeter::NowResponse>* PrepareAsyncWatchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::Greeter::NowResponse>> Ticktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Greeter::NowResponse>>(TicktokRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Greeter::NowResponse>> AsyncTicktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Greeter::NowResponse>>(AsyncTicktokRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Greeter::NowResponse>> PrepareAsyncTicktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Greeter::NowResponse>>(PrepareAsyncTicktokRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>> Watch(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>>(WatchRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>> AsyncWatch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>>(AsyncWatchRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>> PrepareAsyncWatch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>>(PrepareAsyncWatchRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ticktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest* request, ::grpc::ClientReadReactor< ::Greeter::NowResponse>* reactor) override;
      void Watch(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Greeter::WatchRequest,::Greeter::NowResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::Greeter::NowResponse>* TicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request) override;
    ::grpc::ClientAsyncReader< ::Greeter::NowResponse>* AsyncTicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Greeter::NowResponse>* PrepareAsyncTicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>* WatchRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>* AsyncWatchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>* PrepareAsyncWatchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ticktok_;
    const ::grpc::internal::RpcMethod rpcmethod_Watch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ticktok(::grpc::ServerContext* context, const ::Greeter::TicktokRequest* request, ::grpc::ServerWriter< ::Greeter::NowResponse>* writer);
    virtual ::grpc::Status Watch(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ticktok : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ticktok() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ticktok() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ticktok(::grpc::ServerContext* /*context*/, const ::Greeter::TicktokRequest* /*request*/, ::grpc::ServerWriter< ::Greeter::NowResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTicktok(::grpc::ServerContext* context, ::Greeter::TicktokRequest* request, ::grpc::ServerAsyncWriter< ::Greeter::NowResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Watch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatch(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ticktok<WithAsyncMethod_Watch<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ticktok : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ticktok() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Greeter::TicktokRequest, ::Greeter::NowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Greeter::TicktokRequest* request) { return this->Ticktok(context, request); }));
    }
    ~WithCallbackMethod_Ticktok() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ticktok(::grpc::ServerContext* /*context*/, const ::Greeter::TicktokRequest* /*request*/, ::grpc::ServerWriter< ::Greeter::NowResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::Greeter::NowResponse>* Ticktok(
      ::grpc::CallbackServerContext* /*context*/, const ::Greeter::TicktokRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Watch() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::Greeter::WatchRequest, ::Greeter::NowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Watch(context); }));
    }
    ~WithCallbackMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::Greeter::WatchRequest, ::Greeter::NowResponse>* Watch(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Ticktok<WithCallbackMethod_Watch<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ticktok : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ticktok() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ticktok() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ticktok(::grpc::ServerContext* /*context*/, const ::Greeter::TicktokRequest* /*request*/, ::grpc::ServerWriter< ::Greeter::NowResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Watch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ticktok : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ticktok() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ticktok() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ticktok(::grpc::ServerContext* /*context*/, const ::Greeter::TicktokRequest* /*request*/, ::grpc::ServerWriter< ::Greeter::NowResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTicktok(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Watch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatch(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ticktok : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ticktok() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Ticktok(context, request); }));
    }
    ~WithRawCallbackMethod_Ticktok() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ticktok(::grpc::ServerContext* /*context*/, const ::Greeter::TicktokRequest* /*request*/, ::grpc::ServerWriter< ::Greeter::NowResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Ticktok(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Watch() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Watch(context); }));
    }
    ~WithRawCallbackMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Watch(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Ticktok : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Ticktok() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Greeter::TicktokRequest, ::Greeter::NowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Greeter::TicktokRequest, ::Greeter::NowResponse>* streamer) {
                       return this->StreamedTicktok(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Ticktok() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ticktok(::grpc::ServerContext* /*context*/, const ::Greeter::TicktokRequest* /*request*/, ::grpc::ServerWriter< ::Greeter::NowResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTicktok(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Greeter::TicktokRequest,::Greeter::NowResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Ticktok<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Ticktok<Service > StreamedService;
};

}  // namespace Greeter


#endif  // GRPC_greeter_2eproto__INCLUDED
