// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greeter.proto

#include "greeter.pb.h"
#include "greeter.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Greeter {

static const char* GreeterService_method_names[] = {
  "/Greeter.GreeterService/Hello",
};

std::unique_ptr< GreeterService::Stub> GreeterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GreeterService::Stub> stub(new GreeterService::Stub(channel, options));
  return stub;
}

GreeterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Hello_(GreeterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GreeterService::Stub::Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::Greeter::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Greeter::HelloRequest, ::Greeter::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hello_, context, request, response);
}

void GreeterService::Stub::async::Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Greeter::HelloRequest, ::Greeter::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, std::move(f));
}

void GreeterService::Stub::async::Hello(::grpc::ClientContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>* GreeterService::Stub::PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Greeter::HelloResponse, ::Greeter::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Greeter::HelloResponse>* GreeterService::Stub::AsyncHelloRaw(::grpc::ClientContext* context, const ::Greeter::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

GreeterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreeterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GreeterService::Service, ::Greeter::HelloRequest, ::Greeter::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GreeterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Greeter::HelloRequest* req,
             ::Greeter::HelloResponse* resp) {
               return service->Hello(ctx, req, resp);
             }, this)));
}

GreeterService::Service::~Service() {
}

::grpc::Status GreeterService::Service::Hello(::grpc::ServerContext* context, const ::Greeter::HelloRequest* request, ::Greeter::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TimeService_method_names[] = {
  "/Greeter.TimeService/Ticktok",
  "/Greeter.TimeService/Watch",
};

std::unique_ptr< TimeService::Stub> TimeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TimeService::Stub> stub(new TimeService::Stub(channel, options));
  return stub;
}

TimeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ticktok_(TimeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Watch_(TimeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReader< ::Greeter::NowResponse>* TimeService::Stub::TicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::Greeter::NowResponse>::Create(channel_.get(), rpcmethod_Ticktok_, context, request);
}

void TimeService::Stub::async::Ticktok(::grpc::ClientContext* context, const ::Greeter::TicktokRequest* request, ::grpc::ClientReadReactor< ::Greeter::NowResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Greeter::NowResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Ticktok_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Greeter::NowResponse>* TimeService::Stub::AsyncTicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Greeter::NowResponse>::Create(channel_.get(), cq, rpcmethod_Ticktok_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Greeter::NowResponse>* TimeService::Stub::PrepareAsyncTicktokRaw(::grpc::ClientContext* context, const ::Greeter::TicktokRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Greeter::NowResponse>::Create(channel_.get(), cq, rpcmethod_Ticktok_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>* TimeService::Stub::WatchRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Greeter::WatchRequest, ::Greeter::NowResponse>::Create(channel_.get(), rpcmethod_Watch_, context);
}

void TimeService::Stub::async::Watch(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Greeter::WatchRequest,::Greeter::NowResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Greeter::WatchRequest,::Greeter::NowResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>* TimeService::Stub::AsyncWatchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Greeter::WatchRequest, ::Greeter::NowResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Greeter::WatchRequest, ::Greeter::NowResponse>* TimeService::Stub::PrepareAsyncWatchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Greeter::WatchRequest, ::Greeter::NowResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, false, nullptr);
}

TimeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TimeService::Service, ::Greeter::TicktokRequest, ::Greeter::NowResponse>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Greeter::TicktokRequest* req,
             ::grpc::ServerWriter<::Greeter::NowResponse>* writer) {
               return service->Ticktok(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TimeService::Service, ::Greeter::WatchRequest, ::Greeter::NowResponse>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Greeter::NowResponse,
             ::Greeter::WatchRequest>* stream) {
               return service->Watch(ctx, stream);
             }, this)));
}

TimeService::Service::~Service() {
}

::grpc::Status TimeService::Service::Ticktok(::grpc::ServerContext* context, const ::Greeter::TicktokRequest* request, ::grpc::ServerWriter< ::Greeter::NowResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeService::Service::Watch(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Greeter::NowResponse, ::Greeter::WatchRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Greeter

